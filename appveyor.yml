# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - main

  # blacklist
  # except:
  #   - gh-pages

# Do not build on tags (GitHub and BitBucket)
# skip_tags: true

# # Start builds on tags only (GitHub and BitBucket)
# skip_non_tags: true

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# # Build worker image (VM template)
# image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:

# clone directory
clone_folder: C:\ncodawindows

# fetch repository as zip archive
# shallow_clone: true                 # default is "false"

# set clone depth
# clone_depth: 1                      # clone entire repository history if not defined


# environment variables
environment:
  auth_token:
    secure: Ile301NnDvTpQ6i1B3Kdgh1hLc9QuiABjJTXPERabJgEnNyBc8ogqUZVYEpdOtio


# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

# # build cache to preserve files/folders between builds
# cache:
#   - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
#   - projectA\libs
#   - node_modules                    # local npm modules
#   - '%LocalAppData%\NuGet\Cache'

# scripts that run after cloning repository
install:
  - git clone --recursive https://github.com/nCoda/julius.git julius
  - git clone https://github.com/nCoda/lychee.git lychee
  - git clone https://github.com/nCoda/fujian.git fujian
  - git clone https://github.com/nCoda/mercurial-hug.git mercurial-hug
  - git clone https://github.com/nCoda/ShelfExtender.git ShelfExtender
  - git clone https://github.com/nCoda/hgdemo_config.git hgdemo_config
  - rm julius/js/electron_main.js
  - pip install --upgrade pip
  - pip install Cython
  - pip install virtualenv
  - pip install py2app
  - pip install biplist
  - cp electron_main_production.js julius\js\electron_main.js
  - git 
  # by default, all script lines are interpreted as batch
  - echo This is batch
  # to run script as a PowerShell command prepend it with ps:
  - ps: Write-Host 'This is PowerShell'
  # batch commands start from cmd:
  - cmd: echo This is batch again
  - cmd: set MY_VAR=12345

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

# build:
#   parallel: true                  # enable MSBuild parallel builds
  # project: MyTestAzureCS.sln      # path to Visual Studio solution or project
  # publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
  # publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
  # publish_azure: true             # package Azure Cloud Service projects and push to artifacts
  # publish_nuget: true             # package projects with .nuspec files and push to artifacts
  # publish_nuget_symbols: true     # generate and publish NuGet symbol packages
  # include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # # MSBuild verbosity level
  # # verbosity: quiet|minimal|normal|detailed
  # verbosity: normal


# # scripts to run before build
# before_build:

# # scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
# before_package:

# # scripts to run after build
# after_build:

# # to run your custom scripts instead of automatic MSBuild
# build_script:

# to disable automatic builds
build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# test:
#   assemblies:
#     - asm1.dll
#     - asm2.dll

#   categories:
#     - UI
#     - E2E

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
before_test:
  - echo script1
  - ps: Write-Host "script1"

# scripts to run after tests
after_test:

# to run your custom scripts instead of automatic tests
test_script:
  - echo This is my custom test script

# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:

  # # pushing a single file
  # - path: test.txt

  # # pushing a single file with environment variable in path and "Deployment name" specified
  # - path: MyProject\bin\$(configuration)
  #   name: myapp

  # pushing entire folder as a zip archive
  - path: dummy

  # # pushing all *.nupkg files in build directory recursively
  # - path: '**\*.nupkg'


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:
    # Deploy to GitHub Releases
  - provider: GitHub
    artifact: dummy.zip           # upload all NuGet packages to release assets
    draft: true
    force_update: true
    prerelease: false
    auth_token: 
      secure: Ile301NnDvTpQ6i1B3Kdgh1hLc9QuiABjJTXPERabJgEnNyBc8ogqUZVYEpdOtio
    on:
      branch: main                # release from master branch only
      appveyor_repo_tag: false       # deploy on tag push only

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  

# on build failure
on_failure:
  

# after build failure or success
on_finish:
  